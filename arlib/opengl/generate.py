#!/usr/bin/env python3
import sys

filter_std = "-f" in sys.argv # only portable (unsuffixed, EXT, ARB or OES) functions; this is about 1900, though many are dupes of core functions
filter_core = "-ff" in sys.argv # only core (unsuffixed) functions; this is about 1000
filter_used = "-fff" in sys.argv # only functions used by the program, should be about 100; only works if your interface object is named 'gl'; 
#unfiltered is about 2600 functions

def readfile(name):
	return open(name, 'rt').read()

def writefile(name, data):
	open(name, 'wt').write(data)

def collapse(str):
	return ' '.join(str.split())

def compile(header):
	lines = header.split("\n")
	typedefs = {}
	funcs = []
	for i,line in enumerate(lines):
		if line.startswith("GLAPI") or line.startswith("WINGDIAPI"):
			func = line
			while ")" not in func:
				i += 1
				func += lines[i]
			funcs.append(func)
		if line.startswith("typedef") and "(" in line:
			name = line.split(")")[0]
			name = name.split("(")[1]
			name = name.split(" ")[1]
			typedefs[name] = True
	out = []
	for func in funcs:
		func = func.replace("GLAPIENTRY","APIENTRY").replace("WINGDIAPI","GLAPI")
		ret = collapse(func.split("APIENTRY")[0].split("GLAPI")[1])
		name = collapse(func.split("APIENTRY")[1].split("(")[0])[2:]
		args = collapse(func.split("(")[1].split(")")[0])
		out.append({ "name": name, "ret": ret, "args": args })
	out.sort(key = lambda func: func["name"])
	return out

def extract_gl(code):
	import re
	code = re.sub("//.*", "", code)
	return set(re.findall("gl.([A-Za-z0-9]*)", code))

def filter(functions, used):
	return [f for f in functions if f["name"] in used]


header = readfile("../deps/gl.h")
header += readfile("../deps/glext.h")

functions = compile(header)


def isupperonly(str):
	return str.isalpha() and str.isupper()

if filter_core:
	functions = [f for f in functions if not isupperonly(f["name"][-2:])]

if filter_std:
	functions = [f for f in functions if not isupperonly(f["name"][-2:]) or
		f["name"].endswith("EXT") or f["name"].endswith("ARB") or f["name"].endswith("OES")]

if filter_used:
	import fnmatch
	import os
	
	used = []
	for root, dirs, files in os.walk("../.."):
		for filename in files:
			if filename.endswith((".c", ".cpp")) and filename!="generated.c":
				used += extract_gl(readfile(os.path.join(root, filename)))
	
	functions = filter(functions, used)


with open("generated.c", "wt") as out:
	out.write("""// Autogenerated, do not edit. All changes will be undone.

#if defined(AROPENGL_GEN_HEADER)
""")
	for func in functions:
		out.write(func["ret"]+" (GLAPIENTRY * "+func["name"]+")("+func["args"]+");\n")
	out.write("""
#elif defined(AROPENGL_GEN_NAMES)

""")
	
	for func in functions:
		out.write("\"gl"+func["name"]+"\\0\"\n")
	out.write("""
#endif
""")








